{"version":3,"sources":["assets/sounds/boom.wav","assets/sounds/clap.wav","assets/sounds/hihat.wav","assets/sounds/kick.wav","assets/sounds/openhat.wav","assets/sounds/ride.wav","assets/sounds/snare.wav","assets/sounds/tink.wav","assets/sounds/tom.wav","assets/sounds.js","components/DrumPad.js","components/DrumBank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bankOne","keyCode","keyTrigger","id","url","clap","hihat","kick","openhat","boom","ride","snare","tom","tink","inactiveStyle","width","height","backgroundColor","margin","display","justifyContent","alignItems","transition","activeStyle","fontSize","transform","DrumPad","props","handleKeyPress","e","console","log","playSound","handleStyleChange","state","padStyle","setState","sound","document","getElementById","currentTime","play","setTimeout","updateDisplay","name","addEventListener","this","removeEventListener","className","onClick","style","src","type","Component","DrumBank","currentPadBank","map","drumObj","i","key","App","displayName","clearDisplay","String","fromCharCode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.512d2ec0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.a6e86dd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.4ba39e07.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.4dd58595.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.2a6bb6f5.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.572ed39d.wav\";","import boom from \"./sounds/boom.wav\";\nimport clap from \"./sounds/clap.wav\";\nimport hihat from \"./sounds/hihat.wav\";\nimport kick from \"./sounds/kick.wav\";\nimport openhat from \"./sounds/openhat.wav\";\nimport ride from \"./sounds/ride.wav\";\nimport snare from \"./sounds/snare.wav\";\nimport tink from \"./sounds/tink.wav\";\nimport tom from \"./sounds/tom.wav\";\n\nconst bankOne = [\n  {\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    id: \"Clap\",\n    url: clap,\n  },\n  {\n    keyCode: 87,\n    keyTrigger: \"W\",\n    id: \"Hihat\",\n    url: hihat,\n  },\n  {\n    keyCode: 69,\n    keyTrigger: \"E\",\n    id: \"Kick\",\n    url: kick,\n  },\n  {\n    keyCode: 65,\n    keyTrigger: \"A\",\n    id: \"Open Hat\",\n    url: openhat,\n  },\n  {\n    keyCode: 83,\n    keyTrigger: \"S\",\n    id: \"Boom\",\n    url: boom,\n  },\n  {\n    keyCode: 68,\n    keyTrigger: \"D\",\n    id: \"Ride\",\n    url: ride,\n  },\n  {\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    id: \"Snare\",\n    url: snare,\n  },\n  {\n    keyCode: 88,\n    keyTrigger: \"X\",\n    id: \"Tom\",\n    url: tom,\n  },\n  {\n    keyCode: 67,\n    keyTrigger: \"C\",\n    id: \"Tink\",\n    url: tink,\n  },\n];\n\nexport { bankOne };\n","import React, { Component } from \"react\";\n\nconst inactiveStyle = {\n  width: 90,\n  height: 90,\n  backgroundColor: \"white\",\n  margin: 5,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  transition: \"all .15s\",\n};\n\nconst activeStyle = {\n  width: 90,\n  height: 90,\n  fontSize: 20,\n  backgroundColor: \"sandyBrown\",\n  margin: 5,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  transform: \"scale(1.1)\",\n};\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      padStyle: inactiveStyle,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  handleKeyPress = (e) => {\n    if (e.keyCode === this.props.keyCode) {\n      console.log(e.keyCode);\n      this.playSound();\n    }\n  };\n\n  handleStyleChange = () => {\n    this.state.padStyle.backgroundColor === \"white\"\n      ? this.setState({ padStyle: activeStyle })\n      : this.setState({ padStyle: inactiveStyle });\n  };\n\n  playSound = (e) => {\n    const sound = document.getElementById(this.props.keyTrigger);\n    sound.currentTime = 0;\n    sound.play();\n\n    this.handleStyleChange();\n    setTimeout(() => this.handleStyleChange(), 150);\n\n    this.props.updateDisplay(this.props.name);\n  };\n\n  render() {\n    return (\n      <div\n        className=\"drum-pad\"\n        id={this.props.name}\n        onClick={this.playSound}\n        style={this.state.padStyle}\n      >\n        <audio\n          src={this.props.url}\n          id={this.props.keyTrigger}\n          className=\"clip\"\n          type=\"audio/wav\"\n        ></audio>\n        {this.props.keyTrigger}\n      </div>\n    );\n  }\n}\n\nexport default DrumPad;\n","import React from \"react\";\nimport DrumPad from \"../components/DrumPad\";\n\nfunction DrumBank(props) {\n  return (\n    <div className=\"drum-bank\">\n      {props.currentPadBank.map((drumObj, i) => {\n        return (\n          <DrumPad\n            keyCode={drumObj.keyCode}\n            keyTrigger={drumObj.keyTrigger}\n            name={drumObj.id}\n            url={drumObj.url}\n            key={drumObj[i]}\n            updateDisplay={props.updateDisplay}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default DrumBank;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { bankOne } from \"./assets/sounds\";\n\nimport DrumBank from \"./components/DrumBank\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: String.fromCharCode(160),\n      currentPadBank: bankOne,\n    };\n  }\n\n  displayName = (name) => {\n    this.setState({\n      display: name,\n    });\n\n    setTimeout(() => this.clearDisplay(), 200);\n  };\n\n  clearDisplay = () => {\n    this.setState({\n      display: String.fromCharCode(160),\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <h1 id=\"title\">Drum Machine</h1>\n        <DrumBank\n          currentPadBank={this.state.currentPadBank}\n          updateDisplay={this.displayName}\n        />\n        <h2 id=\"display\">{this.state.display}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}